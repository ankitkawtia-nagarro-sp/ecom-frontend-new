apiVersion: v1
kind: Service #Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable from within the cluster. Expose the service to the public with an Ingress
metadata:
    name: frontend-service
spec:
    type: ClusterIP
    selector: #Route service traffic to pods with label keys and values matching this selector.
        app: frontend 
    ports:
    - port: 80 #The port that will be exposed by this service.
      targetPort: 80 #Number or name of the port to access on the pods targeted by the service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecom-frontend-deployment
spec:
  selector:
    matchLabels:
      app: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: gcr.io/ecom-case-study/frontend-image:v1
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /ui
              port: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress #Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.
metadata:
  name: amcart-frontend-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: "mcart.com"
    http:
      paths:
      #- path: /api/*
      #  backend:
      #    serviceName: zuul-service 
      #    servicePort: 8765
      - path: /ui
        pathType: Prefix
        backend:
          service:
            name: frontend-service 
            port: 
                number: 80
          
